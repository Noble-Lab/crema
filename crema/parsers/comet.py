"""A parser for Comet output"""
import re
import logging

import pandas as pd

from .txt import read_txt
from .. import utils

LOGGER = logging.getLogger(__name__)


def read_comet(txt_files, pairing_file_name=None, copy_data=True):
    """Read peptide-spectrum matches (PSMs) from Comet output.
    Can parse tab-delimited files.

    Parameters
    ----------
    txt_files : str, pandas.DataFrame or tuple of str
        One or more collection of PSMs in the Crux tab-delimited format.
    pairing_file_name : str, optional
        A tab-delimited file that explicity pairs target and decoy peptide
        sequences. Requires one column labled 'target' that contains target
        sequences and a second colun labeled 'decoy' that contains decoy
        sequences. This file can be generated by setting --peptide-list=T
        in tide-index.
    copy_data : bool, optional
        If true, a deep copy of the data is created. This uses more memory, but
        is safer because it prevents accidental modification of the underlying
        data. This argument only has an effect when `txt_files` is a
        :py:class:`pandas.DataFrame`

    Returns
    -------
    PsmDataset
        A :py:class:`~crema.dataset.PsmDataset` object containing the parsed
        PSMs.
    """
    target = "target/decoy"
    peptide = "modified_peptide"
    spectrum = ["scan", "exp_neutral_mass"]  # No file col to use
    pairing = "plain_peptide"
    protein = "protein"
    protein_delim = ","
    other = "modifications"

    # Possible score columns output by Comet.
    scores = {
        "e-value",
        "xcorr",
        "sp_score",
    }
    scores_all = scores

    # Keep only crux scores that exist in all of the files.
    if isinstance(txt_files, pd.DataFrame):
        scores = scores.intersection(set(txt_files.columns))
    else:
        txt_files = utils.listify(txt_files)
        for txt_file in txt_files:
            with open(txt_file) as txt_ref:
                # First line of Comet output consists only of version
                skipLine = txt_ref.readline()
                cols = txt_ref.readline().rstrip().split("\t")
                scores = scores.intersection(set(cols))

    if not scores:
        raise ValueError(
            "Could not find any of the Comet score columns in all of the files."
            f"The columns Crema looks for are {', '.join(list(scores_all))}"
        )

    scores = list(scores)

    # Read in the files:
    fields = (
        spectrum
        + [peptide]
        + [target]
        + scores
        + [pairing]
        + [protein]
        + [other]
    )
    if isinstance(txt_files, pd.DataFrame):
        data = txt_files.copy(deep=copy_data).loc[:, fields]
    else:
        data = pd.concat([_parse_psms(f, fields) for f in txt_files])

    data["target/decoy"] = ~data[protein].str.contains("DECOY_")

    psms = read_txt(
        data,
        target_column=target,
        spectrum_columns=spectrum,
        score_columns=scores,
        peptide_column=peptide,
        protein_column=protein,
        protein_delim=protein_delim,
        sep="\t",
        copy_data=False,
    )

    # Remove first and last amino acid from sequence
    # Looks like "R.WVNEK.Y"
    peptide_column = psms.peptides
    new_peptide_column = peptide_column.str[2:-2]
    psms.set_peptide_column(new_peptide_column)

    # always pair target and decoys for Comet
    if pairing_file_name == None:
        # implicit pairing based off fact that Comet reverses peptides
        psms._peptide_pairing = _create_pairing(data)
    else:  # explicit pairing
        psms._peptide_pairing = utils.create_pairing_from_file(
            pairing_file_name
        )

    # Remove decoy prefix from protein ID
    protein_column = psms.proteins
    new_protein_column = protein_column.str.replace("DECOY_", "", regex=True)
    psms.set_protein_column(new_protein_column)

    return psms


def _parse_psms(txt_file, cols, log=True):
    """Parse a single Crux tab-delimited file

    Parameters
    ----------
    txt_file : str
        The crux tab-delimited file to read.
    cols : list of str
        The columns to parse.

    Returns
    -------
    pandas.DataFrame
        A :py:class:`pandas.DataFrame` containing the parsed PSMs
    """
    if log:
        LOGGER.info("Reading PSMs from %s...", txt_file)
    return pd.read_csv(
        txt_file, sep="\t", skiprows=1, usecols=lambda c: c in cols
    )


def _create_pairing(pairing_data):
    """Parse a single Comet dataframe to implicity pair target and
    decoy sequences.

    Parameters
    ----------
    pairing_data : pandas.DataFrame
        A collection of PSMs with the necessary columns to create a
        target/decoy peptide pairing. Required columns are "sequence".

    Returns
    -------
    pairing : dict
        A map of target and decoy peptide sequence pairings. Targets with
        missing decoys will not be included among the keys.

    """
    # TODO create test for this function
    # ensure pairing_data dataframe contains all necessary columns
    req_fields = ["modified_peptide", "protein", "modifications"]

    if not set(req_fields).issubset(pairing_data.columns):
        miss = ", ".join(set(req_fields) - set(pairing_data.columns))
        raise ValueError(
            f"Required columns for peptide pairing were not detected: {miss}"
        )

    pairing_data = pairing_data.loc[:, req_fields]
    pairing_data["modified_peptide"] = pairing_data["modified_peptide"].str[
        2:-2
    ]
    pairing_data["target/decoy"] = ~pairing_data["protein"].str.contains(
        "DECOY_"
    )

    reverse_peptide_list = []
    for seq in list(pairing_data["modified_peptide"]):
        # NOTE regex is not quite right
        seq_sp = re.split(r"([A-Z]\[\d+\.\d+\])?", seq)
        seq_sp = list(filter(lambda item: item != None, seq_sp))
        seq_sp = list(filter(lambda item: item != "", seq_sp))

        peptide_rev = "".join([seq_sp[0], *reversed(seq_sp[1:-1]), seq_sp[-1]])
        reverse_peptide_list.append(peptide_rev)

    pairing_data["reverse_peptide"] = reverse_peptide_list

    targets = pairing_data[pairing_data["target/decoy"]]
    decoys = pairing_data[~pairing_data["target/decoy"]]

    dic1 = dict(zip(targets["modified_peptide"], targets["reverse_peptide"]))
    dic2 = dict(zip(decoys["reverse_peptide"], targets["modified_peptide"]))

    return dic2.update(dic1)
